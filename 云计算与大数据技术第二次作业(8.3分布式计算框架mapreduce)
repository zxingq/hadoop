## 8.3分布式计算框架MapReduce

MapReduce是一种用于大型硬件集群中对海量数据实施**可靠的，高容错**的分布式计算框架。也是一种经典的并行计算模型。它将大型数据操作作业分解为可以跨服务器集群并行执行的单个任务，适用于大规模数据处理场景。

每个job包含map和reduce部分

#### 8.3.1 MapReduce编程模型

MapReduce编程模型思想：分而治之：简化并行计算的编程模型。

MapReduce主要由两个抽象类构成：

- Mapper类：用于对切分过的原始数据进行处理。
- Reducer类：对Mapper的结果进行汇总。得到最终的输出结果。

##### MapReduce的特点：

优点：

- 易于编程
- 可扩展性
- 高容错性
- 高吞吐量

缺点：

- 难以实时计算
- 不适合流式计算
- 不适合DAG(有向图)计算

MapReduce编程模型特点：

- Mapper
  - Mapper接受<key,value>格式的数据流，并产生同样是<key，value>的输出。
  - Map端处理逻辑写在Mapper类中的map()方法

- Reducer
  - Reduce端搜集多个Mapper端输出的<K,V>数据，进行汇总
  - Reducer的业务逻辑写在reduce()方法中
  - 每组相同的k的<k,Iterator>组调用陪你过一次reduce()方法

Map和Reduce

| 函数   | 输入          | 输出          | 说明                                                         |
| ------ | ------------- | ------------- | ------------------------------------------------------------ |
| Map    | <k1,v1>       | List(<k2,v2>) | 将小数据集（split）进一步解析成一批<key,value>对，输入 Map函数中进行处理。每一个输入的<k1,v1>会输出一批<k2,v2>，<k2,v2>是计算的中间结果。 |
| Reduce | <k2,List(v2)> | <k3,v3>       | 输入的中间结果<k2,List(v2)>中的 List(v2)表示是一批属于同一个 k2的 value |



#### 8.3.1 MapReduce数据流

数据以不同形式在不同节点之间流动。

##### **MapReduce执行流程如下**

**1.分片，格式化数据源（InputFormat**）**

- split阶段：计算分片，
  该阶段是从数据分片出发，把数据输入到处理程序中，是整个过程的开始
- Hadoop会为每一个分片构建一个map任务，并由该任务运行自定义的map函数，从而处理分片中每一条记录。

**2.Map过程**

- 调用map方法对数据进行处理
  - 当数据输入进来以后，我们进行的是 map 阶段的处理。例如对一行的单词进行分割，然后每个单词进行计数为 1 进行输出

**3.shuffle过程**

MapReduce工作过程中，map阶段处理的数据如何传递给Reduce阶段，这个关键的过程叫做Shuffle.Shuffle会将MapTask输出的 处理结果数据分发给 ReduceTask ，并在分发的过程中，对数据按 key 进行分区和排序。 

**4.执行ReduceTask**

 输入 ReduceTask 的数据流是<key, {value list}>形式，用户可以自定义 reduce()方法进行逻辑处理，最终以<key, value>的形式输出。 

**5.写入文件**

 MapReduce 框架会自动把 ReduceTask 生成的<key, value>传入 OutputFormat 的 write 方法，实现文件的写入操作。 

算法运行流程：

-  ResourceManager：是YARN资源控制框架的中心模块，负责集群中所有资源的统一管理和分配。 
-  NodeManager：简称NM，NodeManager是ResourceManager在每台机器上的代理，负责容器管理 。
-  ApplicationMaster：以下简称AM。YARN中每个应用都会启动一个AM，负责向RM申请资源，请求NM启动Container，并告诉Container做什么事情。 
-  ontainer：资源容器。YARN中所有的应用都是在Container之上运行的。AM也是在Container上运行的，不过AM的Container是RM申请的。Container是YARN中资源的抽象，它封装了某个节点上一定量的资源（CPU和内存两类资源）。 
